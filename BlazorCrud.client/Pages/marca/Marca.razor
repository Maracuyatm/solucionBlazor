@page "/marca/{idMarcaEditar:guid?}/{ver:bool?}"

@using BlazorCrud.Shared
@using BlazorCrud.Client.Services
@using CurrieTechnologies.Razor.SweetAlert2
@using Radzen
@using Radzen.Blazor

@inject IMarcaService MarcaService
@inject SweetAlertService Swal
@inject NavigationManager navigation
@inject NotificationService notificationService


<RadzenCard class="rz-my-4 rz-mx-auto custom-rounded-grid">
    <div class="mb-4">
        <h1 class="m-2 text-xl font-semibold">@titulo</h1>
    </div>
    
    <RadzenTemplateForm TItem="MarcaDTO" Data="@marca" Submit="@Guardar">
        <div class="mb-4">
            <!-- Label personalizado -->
            <RadzenFormField Text="Nombre" Variant="Variant.Flat" Style="width: 100%;">
                <RadzenTextBox @bind-Value="marca.Nombre"
                               Name="Nombre"
                               Style="width: 100%;"
                               ReadOnly="@soloLectura" />
            </RadzenFormField>


            <!-- Validador obligatorio conectado por 'Name' -->
            <RadzenRequiredValidator Component="Nombre" Text="El nombre es requerido" Style="color: red;" />
        </div>


        @if (!soloLectura)
        {
            <div class="flex justify-end">
                <div class="flex gap-2 justify-end">
                    <RadzenButton Text="@btnTexto"
                                  class="@((idMarcaEditar.HasValue ? "btn-actualizar" : "btn-editar"))"
                                  Type="Submit" />
                    <RadzenButton Text="Cancelar" class="btn-cancelar" Click="@(() => navigation.NavigateTo("/marcas"))" />
                </div>
            </div>
        }
        else
        {
            <div class="flex justify-end">
                <RadzenButton Text="Volver" class="btn-cancelar" Click="@(() => navigation.NavigateTo("/marcas"))" />
            </div>
        }


    </RadzenTemplateForm>
</RadzenCard>






@code {
    [Parameter]
    public Guid? idMarcaEditar { get; set; }

    [Parameter]
    public bool? ver { get; set; }

    bool soloLectura => ver.HasValue && ver.Value;

    MarcaDTO marca = new();
    string titulo = string.Empty;
    string btnTexto = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (idMarcaEditar.HasValue)
        {
            marca = await MarcaService.Buscar(idMarcaEditar.Value);
            titulo = "Editar marca";
            btnTexto = "Actualizar";
        }
        else
        {
            titulo = "Nueva marca";
            btnTexto = "Guardar";
        }
    }

    private async Task Guardar()
    {
        if (string.IsNullOrWhiteSpace(marca.Nombre))
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error de validación",
                    Detail = "El nombre es requerido.",
                    Duration = 4000
                });
            return;
        }

        if (marca.Nombre.Length < 3)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Longitud insuficiente",
                    Detail = "El campo solicita al menos 3 caracteres.",
                    Duration = 4000
                });
            return;
        }

        if (!System.Text.RegularExpressions.Regex.IsMatch(marca.Nombre, @".*[A-Za-z].*"))
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Nombre inválido",
                    Detail = "El campo no puede ser sólo números.",
                    Duration = 4000
                });
            return;
        }

        if (idMarcaEditar.HasValue)
        {
            var response = await MarcaService.Editar(marca, idMarcaEditar.Value);

            if (!response.EsCorrecto)
            {
                notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error al actualizar",
                        Detail = response.Mensaje ?? "Error desconocido.",
                        Duration = 4000
                    });
                return;
            }

            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Marca actualizada",
                    Detail = "La marca fue actualizada correctamente.",
                    Duration = 3000
                });
        }

        else
        {
            // Si estamos guardando, evaluamos la respuesta por si hay error (como duplicado)
            var response = await MarcaService.Guardar(marca);

            if (!response.EsCorrecto)
            {
                notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error al guardar",
                        Detail = response.Mensaje ?? "Error desconocido.",
                        Duration = 4000
                    });
                return;
            }

            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Marca guardada",
                    Detail = "La marca se guardó correctamente.",
                    Duration = 3000
                });
        }

        navigation.NavigateTo("/marcas");
    }

    


}
